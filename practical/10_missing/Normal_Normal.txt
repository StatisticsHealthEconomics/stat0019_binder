model {

# Control arm (t=1)
for (i in 1:N1){
# Model for the effectiveness variable (QALYs)
   eff1[i] ~ dnorm(phi.e1[i],tau.e[1])
   phi.e1[i] <- alpha0[1]+alpha1[1]*(u1[i]-mu.u[1])

# Model for the baseline utility (covariate for the effectiveness regression)
   u1[i] ~ dnorm(mu.u[1],tau.u[1]) 

# Model for the cost variable (depending on the centered effectiveness)
   cost1[i] ~ dnorm(phi.c1[i],tau.c[1])
   phi.c1[i] <- beta0[1]+beta1[1]*(eff1[i]-mu.e[1])
}

# Intervention arm (t=2)
for (i in 1:N2){
# Model for the effectiveness variable (QALYs)
   eff2[i] ~ dnorm(phi.e2[i],tau.e[2])
   phi.e2[i] <- alpha0[2]+alpha1[2]*(u2[i]-mu.u[2])

# Model for the baseline utility (covariate for the effectiveness regression)
   u2[i] ~ dnorm(mu.u[2],tau.u[2])

# Model for the cost variable (depending on the centered effectiveness)
   cost2[i] ~ dnorm(phi.c2[i],tau.c[2])
   phi.c2[i] <- beta0[2]+beta1[2]*(eff2[i]-mu.e[2]) 
}

# Computes the mean effectiveness and costs
for (t in 1:2) {
   mu.e[t] <- alpha0[t]
   mu.c[t] <- beta0[t]
   
# Priors for the standard deviations (Uniform on the log scale)
   ls.e[t]~dunif(-5,10)             # log standard deviation of effectiveness
   ls.c[t]~dunif(-5,10)             # log standard deviation of costs
   ls.u[t]~dunif(-5,10)             # log standard deviation of baseline utility

# And then rescales the priors on standard deviations, variances & precisions
   sd.e[t] <- exp(ls.e[t])
   ss.e[t] <- sd.e[t]*sd.e[t]
   tau.e[t] <- 1/ss.e[t]
   sd.c[t] <- exp(ls.c[t])
   ss.c[t] <- sd.c[t]*sd.c[t]
   tau.c[t] <- 1/ss.c[t]
   sd.u[t] <- exp(ls.u[t])
   ss.u[t] <- sd.u[t]*sd.u[t]
   tau.u[t] <- 1/ss.u[t]

# And *for the Normal model* can obtain analytically the conditional precision & variance
   lambda.c[t] <- 1/sigma.c[t]                        # Conditional *precision*
   sigma.c[t] <- ss.c[t]-ss.e[t]*pow(beta1[t],2)      # Conditional *variance*

# Priors for the regression coefficients
   alpha0[t] ~ dnorm(0,0.00001)
   alpha1[t] ~ dnorm(0,0.00001)
   beta0[t] ~ dnorm(0,0.000001)
   beta1[t] ~ dnorm(0,0.000001)
   mu.u[t] ~ dnorm(0,0.000001)
}

# Incremental quantities
Delta_e <- mu.e[2]-mu.e[1]
Delta_c <- mu.c[2]-mu.c[1]
}